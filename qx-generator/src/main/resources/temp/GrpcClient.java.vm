package ${package}.user.consumer.grpc.client;

import ${package}.${moduleName}.api.dto.${classname}.response.${className}ResponseDTO;
import ${package}.${moduleName}.api.dto.extend.${className}DTO;
import ${package}.common.utils.mapper.ProtoBufUtils;
import ${package}.grpc.lib.${classname}.${className}OuterClass;
import ${package}.grpc.lib.${classname}.${className}ServiceGrpc;
import io.grpc.Channel;
import net.devh.springboot.autoconfigure.grpc.client.GrpcClient;
import org.springframework.stereotype.Service;

/**
 * @author ${author}
 * ##Date ${datetime}
 */
@Service
public class Grpc${className}Client {
    @GrpcClient("qx-user-provider")
    private Channel serverChannel;

    public ${className}DTO get${className}ById(${className}OuterClass.ByIdReq getByIdReq) {
        ${className}ServiceGrpc.${className}ServiceBlockingStub stub = ${className}ServiceGrpc.newBlockingStub(serverChannel);
        ${className}OuterClass.${className} res = stub.getById(getByIdReq);
        return ProtoBufUtils.fromProtoBuffer(res, ${className}DTO.class);
    }

    public ${className}ResponseDTO get${className}List(${className}OuterClass.GetListReq getListReq) {
        ${className}ServiceGrpc.${className}ServiceBlockingStub stub = ${className}ServiceGrpc.newBlockingStub(serverChannel);
        ${className}OuterClass.PageList pageList = stub.getList(getListReq);
        return ProtoBufUtils.fromProtoBuffer(pageList, ${className}ResponseDTO.class);
    }

    public Boolean add${className}(${className}OuterClass.Base${className} base${className}) {
        ${className}ServiceGrpc.${className}ServiceBlockingStub stub = ${className}ServiceGrpc.newBlockingStub(serverChannel);
        ${className}OuterClass.Result res = stub.insert(base${className});
        return res.getSuccess();
    }

    public Boolean update${className}(${className}OuterClass.${className} role) {
        ${className}ServiceGrpc.${className}ServiceBlockingStub stub = ${className}ServiceGrpc.newBlockingStub(serverChannel);
        ${className}OuterClass.Result res = stub.update(role);
        return res.getSuccess();
    }

    public Boolean delete${className}(${className}OuterClass.ByIdReq req) {
        ${className}ServiceGrpc.${className}ServiceBlockingStub stub = ${className}ServiceGrpc.newBlockingStub(serverChannel);
        ${className}OuterClass.Result res = stub.delete(req);
        return res.getSuccess();
    }
}
